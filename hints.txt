/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home/bin/java -Dfile.encoding=UTF-8 -Dapple.awt.UIElement=true -jar /Volumes/home/garmin/sdks/connectiq-sdk-mac-3.1.6-2019-10-23-2de4665c6/bin/monkeybrains.jar -o /Volumes/home/garmin/WeatherApp/bin/WeatherApp.prg -w -y /Volumes/home/garmin/developer_key.der -f /Volumes/home/garmin/WeatherApp/monkey.jungle 

var locationString;

function onStart(state) {
  Position.enableLocationEvents(Position.LOCATION_CONTINUOUS, method(:onPosition));
}

function onStop(state) {    
  Position.enableLocationEvents(Position.LOCATION_DISABLE, method(:onPosition));	

   if ( Toybox.System has :ServiceDelegate ) {
            Background.deleteTemporalEvent();
            Background.registerForTemporalEvent(new Time.Duration(intervalWebRequest.toNumber() * 60));
        }
}

function onPosition(info) {
    var myLocation = info.position.toDegrees();
    var lat = myLocation[0];
    var long = myLocation[1];        
    locationString = lat + "," + long;
}


==============================================
    // TODO : check ?
        var positionInfo = Position.getInfo().position;
        var quality = Position.getInfo().accuracy;
        if (positionInfo == null) {
          var activityInfo = Activity.getActivityInfo();
          if (activityInfo != null) {
            positionInfo = activityInfo.currentLocation;
            quality = activityInfo.currentLocationAccuracy;
          }
        }
        
        if (positionInfo != null && quality > Position.QUALITY_NOT_AVAILABLE) {
          lattitude = positionInfo.toDegrees()[0];
          longitude = positionInfo.toDegrees()[1];
          System.println("Refresh location " + lattitude + ", " + longitude + " quality : " + quality);
        } else {
            Position.enableLocationEvents(Position.LOCATION_CONTINUOUS, method(:onPosition));
        }


==============================================================================
using Toybox.Application as App;
using Toybox.Background;
using Toybox.WatchUi as Ui;

var canDoBG=false;
var osDataPerHour = new [24];

(:background)
class BatteryInfoApp extends App.AppBase {

    function initialize() {
        AppBase.initialize();
        for (var i=0; i<24; i++) {
        	osDataPerHour[i] = App.getApp().getProperty(getHoursString(i));
        }
        System.println(osDataPerHour[21]);
    }

    // onStart() is called on application start up
    function onStart(state) {
    }

    // onStop() is called when your application is exiting
    function onStop(state) {
    }

    // Return the initial view of your application here
    function getInitialView() {
    	if(Toybox.System has :ServiceDelegate) {
    		canDoBG=true;
    		//Background.registerForTemporalEvent(new Time.Duration(3600));
    		Background.registerForTemporalEvent(new Time.Duration(300));
    	} else {
    		System.println("****background not available on this device****");
    	}
        return [ new BatteryInfoView() ];
    }

    function onBackgroundData(data) {
    	var now=System.getClockTime();
    	var hours = now.hour;
        System.println("onBackgroundData="+data+" at "+ hours);
		App.getApp().setProperty(getHoursString(hours), data);
		osDataPerHour[hours] = data;
        System.println(osDataPerHour[21]);
		//App.getApp().setProperty(osDataPerHour[hours],data);
        //bgdata=data;
        //App.getApp().setProperty(OSDATA,bgdata);
        Ui.requestUpdate();
    }    

    function getServiceDelegate(){
    	var now=System.getClockTime();
    	var ts=now.hour+":"+now.min.format("%02d");    
    	System.println("getServiceDelegate: "+ts);
        return [new BgbgServiceDelegate()];
    }

	function getHoursString(h) {
		return "batteryAtHour" + h;
	
	}


}

using Toybox.Background;
using Toybox.System as Sys;

// The Service Delegate is the main entry point for background processes
// our onTemporalEvent() method will get run each time our periodic event
// is triggered by the system.

(:background)
class BgbgServiceDelegate extends Toybox.System.ServiceDelegate {
	
	function initialize() {
		Sys.ServiceDelegate.initialize();

	}
	
    function onTemporalEvent() {
    	//var now=Sys.getClockTime();
    	//var ts=now.hour+":"+now.min.format("%02d");
        //Sys.println("bg exit: "+ts);
        //just return the timestamp
        Background.exit(Sys.Stats.battery);
    }
    

}


=====================================
only currently :

{
  "latitude": 50.4747,
  "longitude": 3.061,
  "timezone": "Europe/Paris",
  "currently": {
    "time": 1580737327,  // ===> unix time
    "summary": "Ciel Couvert",
    "icon": "cloudy",
    "precipIntensity": 0,
    "precipProbability": 0,
    "temperature": 10.49,
    "apparentTemperature": 10.49,
    "dewPoint": 6.41,
    "humidity": 0.76,
    "pressure": 1016.1,
    "windSpeed": 7.14,
    "windGust": 11.31,
    "windBearing": 258,
    "cloudCover": 0.96,
    "uvIndex": 1,
    "visibility": 16.093,
    "ozone": 330.2
  },
  "offset": 1
}

==============================
