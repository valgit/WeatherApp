var locationString;

function onStart(state) {
  Position.enableLocationEvents(Position.LOCATION_CONTINUOUS, method(:onPosition));
}

function onStop(state) {    
  Position.enableLocationEvents(Position.LOCATION_DISABLE, method(:onPosition));	

   if ( Toybox.System has :ServiceDelegate ) {
            Background.deleteTemporalEvent();
            Background.registerForTemporalEvent(new Time.Duration(intervalWebRequest.toNumber() * 60));
        }
}

function onPosition(info) {
    var myLocation = info.position.toDegrees();
    var lat = myLocation[0];
    var long = myLocation[1];        
    locationString = lat + "," + long;
}


using Toybox.Application as App;
using Toybox.Background;
using Toybox.WatchUi as Ui;

var canDoBG=false;
var osDataPerHour = new [24];

(:background)
class BatteryInfoApp extends App.AppBase {

    function initialize() {
        AppBase.initialize();
        for (var i=0; i<24; i++) {
        	osDataPerHour[i] = App.getApp().getProperty(getHoursString(i));
        }
        System.println(osDataPerHour[21]);
    }

    // onStart() is called on application start up
    function onStart(state) {
    }

    // onStop() is called when your application is exiting
    function onStop(state) {
    }

    // Return the initial view of your application here
    function getInitialView() {
    	if(Toybox.System has :ServiceDelegate) {
    		canDoBG=true;
    		//Background.registerForTemporalEvent(new Time.Duration(3600));
    		Background.registerForTemporalEvent(new Time.Duration(300));
    	} else {
    		System.println("****background not available on this device****");
    	}
        return [ new BatteryInfoView() ];
    }

    function onBackgroundData(data) {
    	var now=System.getClockTime();
    	var hours = now.hour;
        System.println("onBackgroundData="+data+" at "+ hours);
		App.getApp().setProperty(getHoursString(hours), data);
		osDataPerHour[hours] = data;
        System.println(osDataPerHour[21]);
		//App.getApp().setProperty(osDataPerHour[hours],data);
        //bgdata=data;
        //App.getApp().setProperty(OSDATA,bgdata);
        Ui.requestUpdate();
    }    

    function getServiceDelegate(){
    	var now=System.getClockTime();
    	var ts=now.hour+":"+now.min.format("%02d");    
    	System.println("getServiceDelegate: "+ts);
        return [new BgbgServiceDelegate()];
    }

	function getHoursString(h) {
		return "batteryAtHour" + h;
	
	}


}

using Toybox.Background;
using Toybox.System as Sys;

// The Service Delegate is the main entry point for background processes
// our onTemporalEvent() method will get run each time our periodic event
// is triggered by the system.

(:background)
class BgbgServiceDelegate extends Toybox.System.ServiceDelegate {
	
	function initialize() {
		Sys.ServiceDelegate.initialize();

	}
	
    function onTemporalEvent() {
    	//var now=Sys.getClockTime();
    	//var ts=now.hour+":"+now.min.format("%02d");
        //Sys.println("bg exit: "+ts);
        //just return the timestamp
        Background.exit(Sys.Stats.battery);
    }
    

}
